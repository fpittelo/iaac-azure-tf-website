name: Deploy to Dev

on:
  push:
    branches:
      - dev

permissions:
  id-token: write  # Required for OIDC authentication
  contents: read   # Default permission for accessing the repo

jobs:
  # Step 1: Bootstrap Backend Resources (if not already done)
  bootstrap:
    runs-on: ubuntu-latest
    environment: dev #must match the federated credential "based on selection" \
    # and match Github Action Secrets name
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Azure using OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}             # App Registration client ID
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}             # Tenant ID
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }} # Subscription ID
          allow-no-subscriptions: false

      - name:
        run: |
          # Define variables for the backend resources
          az_backend_rg_name="iatbackend"
          az_backend_sa_name="iatbackenddev"
          az_backend_container_name="iatbackend"
          az_location="SwitzerlandNorth"

          # Create resource group if it doesn't exist
          az group create --name $az_backend_rg_name --location $az_location

          # Create storage account if it doesn't exist
          az storage account create \
            --name $az_backend_sa_name \
            --resource-group $az_backend_rg_name \
            --location $az_location \
            --sku Standard_LRS
          
          # Get the storage account key
          STORAGE_KEY=$(az storage account keys list --resource-group $az_backend_rg_name --account-name $az_backend_sa_name --query '[0].value' -o tsv)

          # Create storage container if it doesn't exist
          az storage container create \
            --name $az_backend_container_name \
            --account-name $az_backend_sa_name \
            --account-key $STORAGE_KEY

#     - name: Set up Terraform
#       uses: hashicorp/setup-terraform@v3
# 
#     - name: Terraform Init for Bootstrap
#       working-directory: ./bootstrap
#       run: terraform init
# 
#      - name: Terraform Apply for Bootstrap
#        working-directory: ./bootstrap
#        env:
#          TF_VAR_az_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}  # Pass subscription ID
#          TF_VAR_az_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
#          TF_VAR_az_client_id: ${{ secrets.AZURE_CLIENT_ID }}
#        run: terraform apply -auto-approve

# Step 2: Main Terraform Deployment
  deploy:
    runs-on: ubuntu-latest
    environment: dev #must match the federated credential "based on selection" \
    # and match Github Action Secrets name
    needs: bootstrap # Ensures this runs after the bootstrap job
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Azure using OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}             # App Registration client ID
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}             # Tenant ID
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }} # Subscription ID

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        working-directory: ./main
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          terraform init -var-file="dev.tfvars"

      - name: Terraform Apply
        working-directory: ./main
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          terraform apply -var-file="dev.tfvars" -auto-approve
