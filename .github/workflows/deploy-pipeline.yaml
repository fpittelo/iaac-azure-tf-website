name: Deployment On Azure

on:
  push:
    branches:
      - dev  # Triggers on push to main branch

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy Azure Resources With Terraform
    runs-on: ubuntu-latest
    environment: AZURE

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false

    - name: Login To Azure with OIDC
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    # Step to create the Resource Group, Storage Account, and Blob Container for Terraform state
    - name: Create Azure Resources for Terraform state
      run: |
        RESOURCE_GROUP="DEV"
        LOCATION="switzerlandnorth"
        STORAGE_ACCOUNT_NAME="fpittdev365784"
        CONTAINER_NAME="tfstate"

        # Create Resource Group
        az group create --name $RESOURCE_GROUP --location $LOCATION

        # Create Storage Account
        az storage account create \
          --name $STORAGE_ACCOUNT_NAME \
          --resource-group $RESOURCE_GROUP \
          --location $LOCATION \
          --sku Standard_LRS \
          --kind StorageV2
        
        # Adding a small delay to ensure the storage account is fully provisioned
        sleep 30

        # Fetch the storage account key
        ACCOUNT_KEY=(az storage account keys list \
          --resource-group $RESOURCE_GROUP \
          --account-name $STORAGE_ACCOUNT_NAME \
          --query "[0].value" -o tsv)

        # Verify the account key was fetched correctly
        if [ -z "$ACCOUNT_KEY" ]; then
          echo "Failed to retrieve storage account key"
          exit 1
        fi

        # Create Blob Container
        az storage container create \
          --account-name $STORAGE_ACCOUNT_NAME \
          --name $CONTAINER_NAME \
          --account-key $ACCOUNT_KEY \
          --public-access off

        # Set environment variable for Terraform Backend
        echo "TF_VAR_rg_name=$RESOURCE_GROUP" >> $GITHUB_ENV
        echo "TF_VAR_sa_name=$STORAGE_ACCOUNT_NAME" >> $GITHUB_ENV
        echo "TF_VAR_container_name=$CONTAINER_NAME" >> $GITHUB_ENV

    - name: Initialize Terraform with Backend
      run: |
        terraform init -backend-config="resource_group_name=${{ env.TF_VAR_rg_name }}" \
                       -backend-config="storage_account_name=${{ env.TF_VAR_sa_name }}" \
                       -backend-config="container_name=${{ env.TF_VAR_container_name }}" \
                       -backend-config="key=terraform.tfstate"

    - name: Generate Terraform Deploy Plan
      run: terraform plan

    - name: Execute Terraform Apply
      if: github.ref == 'refs/heads/dev'
      run: terraform apply -auto-approve

###### Publish Website to Azure Web App

  # Deploy to Production
  deploy-prod:
    name: Deploy Website Code to Production
    runs-on: ubuntu-latest
    needs: deploy
    environment: AZURE

    steps:
    - name: Checkout website code
      uses: actions/checkout@v2
      with:
        repository: fpittelo/website
        path: website  # Path to place the checked-out code

    - name: Login To Azure with OIDC
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ secrets.APP_SERVICE_NAME }}
        package: ./website