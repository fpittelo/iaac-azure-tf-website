name: Destroy MAIN

on:
  workflow_dispatch:  # Enables manual triggering of the workflow

permissions:
  id-token: write
  contents: read

jobs:
  destroy:
    name: Destroy MAIN Resources
    runs-on: ubuntu-latest
    environment: AZURE

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false

    - name: Login To Azure with OIDC
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID_MAIN }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID_MAIN }}
        allow-no-subscriptions: false
        enable-AzPSSession: false
        environment: azurecloud

    # Verify the subscription context
    - name: Verify Azure Subscription
      run: |
        az account show
        az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID_MAIN }}
        az account show # Verify subscription context

    # Set environment variables for Terraform authentication and backend
    - name: Set Variables For Terraform
      run: |
        echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID_MAIN }}" >> $GITHUB_ENV
        echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID_MAIN }}" >> $GITHUB_ENV
        echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
        echo "ARM_USE_OIDC=true" >> $GITHUB_ENV  # Important for OIDC authentication
        # Explicitly set Terraform backend configuration variables
        echo "TF_VAR_rg_name=iaac-azure-tf-website" >> $GITHUB_ENV
        echo "TF_VAR_sa_name=iatwebsitemain" >> $GITHUB_ENV
        echo "TF_VAR_container_name=tfstate" >> $GITHUB_ENV

    # Initialize Terraform with Backend
    - name: Initialize Terraform with Backend
      run: |
        terraform init -backend-config="resource_group_name=${{ env.TF_VAR_rg_name }}" \
                       -backend-config="storage_account_name=${{ env.TF_VAR_sa_name }}" \
                       -backend-config="container_name=${{ env.TF_VAR_container_name }}" \
                       -backend-config="key=terraform.tfstate" \
                       -backend-config="client_id=${{ secrets.AZURE_CLIENT_ID_MAIN }}" \
                       -backend-config="tenant_id=${{ secrets.AZURE_TENANT_ID }}" \
                       -backend-config="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID_MAIN }}" \
                       -backend-config="use_oidc=true"

    # Generate Terraform Destroy Plan (Optional, for review purposes)
    - name: Generate Terraform Destroy Plan
      run: terraform plan -destroy

    # Execute Terraform Destroy
    - name: Execute Terraform Destroy
      run: terraform destroy -auto-approve

    # Step to delete the Blob Container
    - name: Delete Blob Container
      run: |
        az storage container delete \
          --name ${{ env.TF_VAR_container_name }} \
          --account-name ${{ env.TF_VAR_sa_name }} \
          --auth-mode login

    # Step to delete the Storage Account
    - name: Delete Storage Account
      run: |
        az storage account delete \
          --name ${{ env.TF_VAR_sa_name }} \
          --resource-group ${{ env.TF_VAR_rg_name }} \
          --yes

    # Step to delete the Resource Group
    - name: Delete Resource Group
      run: |
        az group delete \
          --name ${{ env.TF_VAR_rg_name }} \
          --yes --no-wait