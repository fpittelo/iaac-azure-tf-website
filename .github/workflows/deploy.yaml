name: Deploy Environment

on:
  push:
    branches:
      - dev
      - qa
      - main

permissions:
  id-token: write  # Required for OIDC authentication
  contents: read   # Default permission for accessing the repo

jobs:
  # Step 1: Bootstrap Backend Resources (if not already done)
  backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}  # Use the branch name as environment
    outputs:
      environment: ${{ steps.setenv.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set environment based on branch
        id: setenv
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV
            echo "environment=dev" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/qa" ]]; then
            echo "ENVIRONMENT=qa" >> $GITHUB_ENV
            echo "environment=qa" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "ENVIRONMENT=main" >> $GITHUB_ENV
            echo "environment=main" >> $GITHUB_OUTPUT
          fi

      - name: Login to Azure using OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          allow-no-subscriptions: false
          enable-AzPSSession: false

      - name: Set Azure Subscription
        run:  |
          echo "Setting Azure Subscription to: ${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Create backend resources
        run: |
          # Define variables for the backend resources
          az_backend_rg_name="${{ env.ENVIRONMENT }}-bkd-iat-website"
          az_backend_sa_name="${{ env.ENVIRONMENT }}bkdiatwebsite"
          az_backend_container_name="${{ env.ENVIRONMENT }}-bkd-iat-website-co"
          az_location="SwitzerlandNorth"

          # Create resource group if it doesn't exist
          az group create --name $az_backend_rg_name --location $az_location

          # Create storage account if it doesn't exist
          az storage account create \
            --name $az_backend_sa_name \
            --resource-group $az_backend_rg_name \
            --location $az_location \
            --sku Standard_LRS

          # Adding a small delay to ensure the storage account is fully provisioned
          sleep 30

          # Get the storage account key
          STORAGE_KEY=$(az storage account keys list --resource-group $az_backend_rg_name --account-name $az_backend_sa_name --query '[0].value' -o tsv)

          # Create storage container if it doesn't exist
          az storage container create \
            --name $az_backend_container_name \
            --account-name $az_backend_sa_name \
            --account-key $STORAGE_KEY

  # Step 2: Main Terraform Deployment
  deploy:
    name: Deploy Infra
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }} # Use the branch name as environment
    needs: backend # Ensure this runs after the bootstrap job
    env:
      ENVIRONMENT: ${{ needs.backend.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login To Azure Using OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          allow-no-subscriptions: false
          enable-AzPSSession: false

      - name: Set Terraform Environment Variables
        run: |
          echo "TF_VAR_az_client_id=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_az_tenant_id=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_az_subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_az_container_name=${{ env.ENVIRONMENT }}-bkd-iat-website-co" >> $GITHUB_ENV

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: true
          ENVIRONMENT: ${{ env.ENVIRONMENT }}
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ env.ENVIRONMENT }}-bkd-iat-website" \
            -backend-config="storage_account_name=${{ env.ENVIRONMENT }}bkdiatwebsite" \
            -backend-config="container_name=${{ env.ENVIRONMENT }}-bkd-iat-website-co" \
            -backend-config="key=${{ env.ENVIRONMENT }}-bkd-iat-website.tfstate" \
            -var-file="${{ env.ENVIRONMENT }}.tfvars"
        working-directory: ./infra  # Update the working directory to the new infra folder

      - name: Terraform Apply
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: true
          ENVIRONMENT: ${{ env.ENVIRONMENT }}
          TF_LOG: DEBUG
          TF_LOG_PATH: terraform.log
        run: |
          echo "Using environment: ${{ env.ENVIRONMENT }}"
          terraform apply -var-file="${{ env.ENVIRONMENT }}.tfvars" -auto-approve
        working-directory: ./infra  # Update the working directory to the new infra folder

      - name: Upload Terraform Log
        if: always()  # This ensures the step runs regardless of previous step outcomes
        uses: actions/upload-artifact@v4
        with:
          name: terraform-log
          path: ./infra/terraform.log  # Log file now in infra folder
          overwrite: true

  ###### Publish Website to Azure Web App ######

  deploy-website:
    name: Deploy Website
    runs-on: ubuntu-latest
    needs: deploy
    environment: ${{ github.ref_name }}

    steps:
      - name: Checkout Website code
        uses: actions/checkout@v3
        with:
          repository: fpittelo/website
          path: website

      - name: Login to Azure using OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy Website to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: "${{ github.ref_name }}-iat-mkt"
          package: ./website
